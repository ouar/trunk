<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>fr.gfi.quiz</groupId>
	<artifactId>Quiz</artifactId>
	<packaging>pom</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>Quiz parent</name>

	<properties>
		<org.springframework.version>3.2.4.RELEASE</org.springframework.version>
		<org.springsecurity.version>3.1.3.RELEASE</org.springsecurity.version>
		<junit.version>4.10</junit.version>
		<framework.version>4.0.3</framework.version>
		<slf4j.log4j12.version>1.6.4</slf4j.log4j12.version>
		<log4j.version>1.2.14</log4j.version>
		<cglib.version>2.2.2</cglib.version>
		<h2database.version>1.2.127</h2database.version>
		<encoding.java>UTF-8</encoding.java>
		<scm.server>http://subversion.serv.cdc.fr:10100/svn</scm.server>
		<scm.server.anonymous>http://subversion.serv.cdc.fr:10100/viewsvn</scm.server.anonymous>
		<!--
			scm.local.path
			..............
			Cette propriété permet de fixer le chemin d'acces au projet du composant.
			L'url prend l'une des formes suivantes :
				type 1 : DOMAINE/REFERENTIEL/MODULE/trunk/COMPOSANT
				type 2 : DOMAINE/REFERENTIEL/trunk/COMPOSANT
			où
				DOMAINE est l'un des domaines (cf. ${application.domaine} positionnée ci-dessus)
				REFERENTIEL est le nom du référentiel SVN du projet :
					client, coresi, spirris, gael, ...
				MODULE (OPTIONEL) est le nom d'un domaine interne permet de découper un référentiel SVN
					en sous-ensemble : proto-client, fwk-dei, ...
				COMPOSANT est le nom du projet dans eclipse et le nom du composant MAVEN

			En cas de doute, prendre contact avec l'équipe CCMT méthode

			Exemple :
				type 1 : ep/gide/gide-ws/trunk/gide-ws-client-java
						 ep/gide/gide-ws/trunk/WsGide
				type 2 : deilab/socle-technique/trunk/fwk-dei
						 deilab/desote/trunk/dei-desote
		 -->
		<scm.local.path>DOMAINE/REFERENTIEL/MODULE/trunk/COMPOSANT</scm.local.path>
	</properties>

	<scm>
		<!--
		Cette rubrique permet de positionner les trois types de connections au référentiel :
			connection : en lecture via, un client SVN (client SVN 'ligne de commande', TortoiseSVN, Eclipse)
			developper : lecture et écriture, via un client SVN
			url : en lecture, via un navigateur Web
		-->
		<connection>scm:svn:${scm.server}/${scm.local.path}</connection>
		<developerConnection>scm:svn:${scm.server}/${scm.local.path}</developerConnection>
		<url>${scm.server.anonymous}/${scm.local.path}</url>
	</scm>

	<build>

		<resources>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.5</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- La version de java est 1.7-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>${encoding.java}</encoding>
				</configuration>
			</plugin>
			<!-- WORKAROUND : desactive les erreurs liees aux tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<testFailureIgnore>true</testFailureIgnore>
				</configuration>
			</plugin>
			<!-- FIN DE WORKAROUND -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<attach>true</attach>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<downloadSources>true</downloadSources>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>Quiz-metier</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>Quiz-web</artifactId>
				<version>${project.version}</version>
			</dependency>


			<!-- version of spring Framework -->

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration Define this if you need any of these integrations -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context) Define this if you use Spring Transactions or DAO Exception Hierarchy(org.springframework.transaction.*/org.springframework.dao.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis.(depends on spring-core, spring-beans, spring-context, spring-tx) Define this if you need
				ORM (org.springframework.orm.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Web application development utilities applicable to both Servlet and Portlet Environments(depends on spring-core, spring-beans, spring-context) Define this if you use
				Spring MVC, or wish to use Struts, JSF, or another web framework with Spring (org.springframework.web.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Spring MVC for Servlet Environments (depends on spring-core, spring-beans, spring-context, spring-web) Define this if you use Spring MVC with a Servlet Container such
				as Apache Tomcat (org.springframework.web.servlet.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Spring MVC for Portlet Environments (depends on spring-core, spring-beans, spring-context, spring-web) Define this if you use Spring MVC with a Portlet Container (org.springframework.web.portlet.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc-portlet</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<!--Support for testing Spring applications with tools such as JUnit and TestNGThis artifact is generally always Defined with a 'test' scope for the integration testing framework
				and unit testing stubs -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${org.springframework.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!-- Spring Security -->
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-core</artifactId>
				<version>${org.springsecurity.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-web</artifactId>
				<version>${org.springsecurity.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-config</artifactId>
				<version>${org.springsecurity.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-taglibs</artifactId>
				<version>${org.springsecurity.version}</version>
			</dependency>

			<!-- LOG  -->

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.log4j12.version}</version>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
			</dependency>

			<!-- Base de donnees memoire pour demarrer rapidement un projet -->

			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<version>${h2database.version}</version>
			</dependency>

			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib</artifactId>
				<version>${cglib.version}</version>
			</dependency>

		</dependencies>

	</dependencyManagement>
  <modules>
    <module>Quiz-metier</module>
    <module>Quiz-web</module>
  </modules>
</project>