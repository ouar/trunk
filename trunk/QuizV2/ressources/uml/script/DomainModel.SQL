--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 7.1.829
--   Created On : lundi, 14 avril, 2014 
--   DBMS       : MySql 
--   -------------------------------------------------- 

USE quizz;


--  Drop Tables, Stored Procedures and Views 
DROP TABLE IF EXISTS reponse;
DROP TABLE IF EXISTS reponse_candidat;
DROP TABLE IF EXISTS quizz_sujet;
DROP TABLE IF EXISTS quizz_question;
DROP TABLE IF EXISTS question;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS sujet;
DROP TABLE IF EXISTS quizz;
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS theme;
DROP TABLE IF EXISTS role;
DROP TABLE IF EXISTS difficulte;



--  Create Tables 
CREATE TABLE reponse
(
	id INTEGER NOT NULL AUTO_INCREMENT,
	ref_question INTEGER NOT NULL,
	lib_reponse TEXT COMMENT 'réponse d''une question',
	bol_type_reponse BOOL COMMENT 'indique s''il s''agit d''une bonne  réponse ou pas: 1->une bonne  reponse 0-> fausse reponse',
	PRIMARY KEY (id),
	KEY (ref_question)
)  COMMENT='recense les choix de réponses possibles aux questions';


CREATE TABLE reponse_candidat
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_question INTEGER NOT NULL,
	ref_reponse INTEGER COMMENT 'référence de la réponse du candidat',
	ref_quizz INTEGER,
	PRIMARY KEY (Id),
	KEY (ref_question),
	KEY (ref_quizz),
	KEY (ref_reponse)
)  COMMENT='recense les réponses des candidats';


CREATE TABLE quizz_sujet
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_quizz INTEGER,
	ref_type_sujet INTEGER,
	ref_difficulte INTEGER NOT NULL,
	nb_question INTEGER COMMENT 'nombre de questions posees',
	nb_question_ok INTEGER COMMENT 'nombre de bonnes réponses',
	nb_question_demi_ok INTEGER COMMENT 'nombre de questions a moitie bien repondues',
	PRIMARY KEY (Id),
	KEY (ref_quizz),
	KEY (ref_type_sujet, ref_difficulte)
)  COMMENT='table de correspondance entre un quizz et les différents types de sujets. ';


CREATE TABLE quizz_question
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_quizz INTEGER,
	ref_question INTEGER,
	PRIMARY KEY (Id),
	KEY (ref_question),
	KEY (ref_quizz)
)  COMMENT='table de correspondance entre le quizz et les différentes questions posées';


CREATE TABLE question
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_type_sujet INTEGER NOT NULL COMMENT 'clé etrangère vers la table des types de sujet',
	ref_difficulte_question INTEGER NOT NULL COMMENT 'difficulté de la question',
	lib_question TEXT COMMENT 'libellé de la question posée',
	dat_creation DATE COMMENT 'date de création de la question',
	int_duree_reflexion INTEGER COMMENT 'durée estimée pour répondre à une question',
	bol_unique_reponse BOOL COMMENT 'indique si une question a une ou plusieurs réponse(s) possible(s) 0->une reponse 1->plusieurs reponses',
	url_image VARCHAR(50) COMMENT 'url d''une éventuelle image utilisée pour la question',
	isValid BOOL COMMENT 'indique si une question est toujours valide c''est à dire utilisable par un quizz',
	PRIMARY KEY (Id),
	KEY (ref_type_sujet, ref_difficulte_question)
)  COMMENT='recence des questions pour chaque type de sujet';


CREATE TABLE user_roles
(
	user_role_id INTEGER NOT NULL AUTO_INCREMENT,
	user_id INTEGER,
	role_id INTEGER,
	PRIMARY KEY (user_role_id),
	KEY (role_id),
	KEY (user_id)
) ;


CREATE TABLE sujet
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_difficulte INTEGER NOT NULL,
	libelle VARCHAR(50) NOT NULL COMMENT 'libellé du type (ex: Hibernate ou J2E)',
	ref_langage INTEGER NOT NULL COMMENT 'clé étrangére vers la table langage',
	PRIMARY KEY (Id, ref_difficulte),
	KEY (ref_difficulte),
	KEY (ref_langage)
)  COMMENT='recense les types de technologies des questions posées';


CREATE TABLE quizz
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	int_duree INTEGER,
	prenom_candidat VARCHAR(50),
	nom_candidat VARCHAR(50),
	lib_commentaire TEXT,
	dat_quizz DATETIME COMMENT 'date du passage du quizz par le candidat',
	ref_user INTEGER NOT NULL,
	PRIMARY KEY (Id),
	KEY (ref_user)
)  COMMENT='recense des quizz';


CREATE TABLE user
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	nom VARCHAR(50),
	prenom VARCHAR(50),
	login VARCHAR(20),
	password VARCHAR(20),
	PRIMARY KEY (Id)
)  COMMENT='recense tous les utlisateurs';


CREATE TABLE theme
(
	id INTEGER NOT NULL AUTO_INCREMENT COMMENT 'id unique de la table langage',
	libelle VARCHAR(50) NOT NULL COMMENT 'libelle du langage (exemple jee,java,...)',
	PRIMARY KEY (id)
)  COMMENT='Table qui recense les differents themes tel que java,UMl,C';


CREATE TABLE role
(
	id INTEGER NOT NULL,
	lib_role VARCHAR(50) NOT NULL,
	PRIMARY KEY (id)
)  COMMENT='cette table référentiel sert à resencer les différents roles possible que puisse posséder un utlisateurs';


CREATE TABLE difficulte
(
	id INTEGER NOT NULL,
	lib_difficulte VARCHAR(20),
	PRIMARY KEY (id)
) ;





--  Create Foreign Key Constraints 
ALTER TABLE reponse ADD CONSTRAINT FK_reponse_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_reponse 
	FOREIGN KEY (ref_reponse) REFERENCES reponse (id);

ALTER TABLE quizz_sujet ADD CONSTRAINT FK_quizz_sujet_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE quizz_sujet ADD CONSTRAINT FK_quizz_sujet_type_sujet 
	FOREIGN KEY (ref_type_sujet, ref_difficulte) REFERENCES sujet (Id, ref_difficulte);

ALTER TABLE quizz_question ADD CONSTRAINT FK_quizz_question_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE quizz_question ADD CONSTRAINT FK_quizz_question_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE question ADD CONSTRAINT FK_question_type_sujet 
	FOREIGN KEY (ref_type_sujet, ref_difficulte_question) REFERENCES sujet (Id, ref_difficulte);

ALTER TABLE user_roles ADD CONSTRAINT FK_user_roles_role 
	FOREIGN KEY (role_id) REFERENCES role (id);

ALTER TABLE user_roles ADD CONSTRAINT FK_user_roles_user 
	FOREIGN KEY (user_id) REFERENCES user (Id);

ALTER TABLE sujet ADD CONSTRAINT FK_type_sujet_Difficulte 
	FOREIGN KEY (ref_difficulte) REFERENCES difficulte (id);

ALTER TABLE sujet ADD CONSTRAINT FK_type_sujet_langage 
	FOREIGN KEY (ref_langage) REFERENCES theme (id);

ALTER TABLE quizz ADD CONSTRAINT FK_quizz_user 
	FOREIGN KEY (ref_user) REFERENCES user (Id);
