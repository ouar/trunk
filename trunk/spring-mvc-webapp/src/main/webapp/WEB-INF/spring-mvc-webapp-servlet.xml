<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Contexte d'application pour spring-mvc-webapp.
-->
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 		
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
 
  <!--
    - Tous les contrôleurs sont automatiquement détectés grâce à l'annotation @Controller.
    - On définit ici dans quel package le post processor doit chercher ces beans éventuellement annotés.
  -->
  <!-- <context:component-scan base-package="com.netapsys.springmvc.web.bean"/> -->
 <mvc:annotation-driven />
    <!--
      - Les controlleurs de cette application fournissent une annotation @RequestMapping 
      - Qui peuvent être déclaré de deux manière différentes : 
      - Au niveau de la classe par exemple : 
      -     @RequestMapping("/addVisit.html")
      -     Pour ce type de controlleurs on peut annoter les méthodes pour qu'elles
      -     prennent en charge une requête Post ou une requête Get
      -     @RequestMapping(method = RequestMethod.GET)
      - Ou alors au niveau de chaque méthode, différents exemples  seront fournis.		 
    -->
 
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
      <!--
        Ceci est le view resolver, il permet de définir la technologie de vue utilisée et comment
        sélectionner une vue. Ici on prendra la solution la plus simple, elle permet de mapper 
        le nom de la vue retournée avec la sélection d'une jsp.
        Exemple si le nom de la vue retournée est "foo/bar/hello" alors on utilisera le fichier
        WEB-INF/jsp/foo/bar/hello.jsp pour constuire la vue. 
      -->
      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/"  p:suffix=".jsp">
              
	<!-- exposing Controller bean helloWorldController to the view  -->
          <property name="exposedContextBeanNames">
            <list>
             <value>acceuil</value>
             <value>login</value>
             <value>contact</value>
             <value>hello</value>  
                          <value>SignUpForm</value> 
                    
            </list>
          </property>  
           <!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>    -->   		 
       </bean>
      
      
      <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * MAPPING CONTROLLER * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	*
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->
 
	<bean id="mappingSpecifique" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order"><value>0</value></property>
		<property name="mappings">
			<props>			
				 <prop key="/ListStock.html">listStockController</prop>
				 <prop key="/ajouterStock.html">listStockController</prop>
				 <prop key="/connection.html">HelloSpringMVC</prop>
				  <prop key="/acceuil.html">HelloSpringMVC</prop>
				  <prop key="/contact.html">HelloSpringMVC</prop>
				   <prop key="/hello.html">HelloSpringMVC</prop>
				    <prop key="/time.html">HelloSpringMVC</prop>
				    <prop key="/signup.html">listStockController</prop>	
				 <!-- <prop key="/pages/*contact_form.do">manageContactController</prop>		 -->
			</props>
		</property>
	</bean>
 
	<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * DEFINITION DES CONTROLLERS * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	*  Definir ici vos controllers ex :
	*	<bean id="contactCommercialController"
	*	class="com.smatis.siteweb.controller.ContactController"> 
	*	<property name="contactService"><ref bean="contactService"/></property>
	*	<property name="sessionForm"><value>true</value></property>
	*	<property name="formView"><value>contacts/commercial/formulaireContactCommercial</value></property>
	*	<property name="successView"><value>contacts/commercial/formulaireContactCommercialSucces</value></property>
	*	<property name="commandName"><value>contact</value></property>
	*	<property name="commandClass"><value>com.smatis.siteweb.modele.contacts.ContactCommercial</value></property>
	*	<property name="validator"><ref bean="contactValidator" /></property>
	*	</bean>
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->
	<bean id="listStockController" class="com.netapsys.springmvc.web.bean.ListStockController">
	
	    
		<!-- <property name="formView"><value>jsp/bootstrap.jsp</value></property>
		<property name="successView"><value>jsp/bootstrap.jsp</value></property> -->
		<!-- <property name="commandName"><value>contactCriteriasModel</value></property>  -->
		<!-- <property name="contactService"><ref bean="contactService"/></property>
		<property name="mapperDozerBean"><ref bean="mapperDozerBean"/></property>  -->
	<!-- <property name="urlMap">
        <map>
            <entry key="jsp/bootstrap.jsp" value-ref="listStockController"/>
        </map>
    </property> -->   
	</bean>
 <bean id="HelloSpringMVC" class="com.netapsys.springmvc.web.bean.HelloSpringMVC">
     
     
     
     
     
 </bean>
	<!-- <bean id="manageContactController" class="org.scub.foundation.contact.manager.client.spring.mvc.controller.ManageContactController">
		<property name="formView"><value>pages/contact_form</value></property>
		<property name="commandName"><value>contactModel</value></property>
		<property name="contactService"><ref bean="contactService"/></property>
		<property name="mapperDozerBean"><ref bean="mapperDozerBean"/></property>
	</bean> -->
	
	<bean id="hibernate" class="com.netapsys.springmvc.web.bean.ConnectionHibernate"
	    factory-method="getInstance" lazy-init="false"></bean>
	
		<bean id="monLogger" class="com.netapsys.springmvc.web.bean.LogUtil"/>    
	<!--	Fin de la configuration AOP -->	
	
	<bean name="monService" class="com.netapsys.springmvc.web.bean.MonService" />
 <!--	Debut de la configuration AOP -->	
		<aop:config>
		<aop:pointcut id="servicePointcut"  expression="execution(* com.netapsys.springmvc.web.bean.*.*(..)) and !execution(* com.netapsys.springmvc.web.bean.ConnectionHibernate*.*(..))" />    		
		<aop:aspect id="loggingAspect" ref="monLogger">
		    <aop:before method="logMethodEntry"  pointcut-ref="servicePointcut"/>    		
		    <aop:after-returning method="logMethodExit" returning="result" pointcut-ref="servicePointcut"/>
	    </aop:aspect>	    
	</aop:config>

  <bean class="org.springframework.context.support.ResourceBundleMessageSource"
		id="messageSource">
		<property name="basename" value="messages" />
	</bean>	
	
 <!--  <bean class="com.netapsys.springmvc.web.bean.Context" id="context" factory-method="getInstance" lazy-init="false">
   <property name="urlWebService">
                <value>http://localhost:8081/metro-webapp/hello?wsdl</value>
        </property>	 
    <constructor-arg value="http://localhost:8081/metro-webapp/hello?wsdl">             
     </constructor-arg> 
</bean> -->
</beans>