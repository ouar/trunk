--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 7.1.829
--   Created On : lundi, 12 août, 2013 
--   DBMS       : MySql 
--   -------------------------------------------------- 

USE Quizz;


--  Drop Tables, Stored Procedures and Views 
DROP TABLE IF EXISTS reponse_candidat;
DROP TABLE IF EXISTS reponse;
DROP TABLE IF EXISTS quizz_sujet;
DROP TABLE IF EXISTS quizz_question;
DROP TABLE IF EXISTS type_sujet;
DROP TABLE IF EXISTS quizz;
DROP TABLE IF EXISTS question;
DROP TABLE IF EXISTS niveau_question;
DROP TABLE IF EXISTS langage;
DROP TABLE IF EXISTS admin;



--  Create Tables 
CREATE TABLE reponse_candidat
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_question INTEGER NOT NULL,
	ref_reponse INTEGER COMMENT 'référence de la réponse du candidat',
	ref_quizz INTEGER,
	PRIMARY KEY (Id),
	KEY (ref_question),
	KEY (ref_quizz),
	KEY (ref_reponse)
)  COMMENT='recense les réponses des candidats';


CREATE TABLE reponse
(
	id INTEGER NOT NULL AUTO_INCREMENT,
	ref_question INTEGER NOT NULL,
	lib_reponse TEXT COMMENT 'réponse d''une question',
	bol_type_reponse BOOL COMMENT 'indique s''il s''agit d''une bonne  réponse ou pas: 0->une bonne  reponse 1-> fausse reponses',
	PRIMARY KEY (id),
	KEY (ref_question)
)  COMMENT='recense les choix de réponses possibles aux questions';


CREATE TABLE quizz_sujet
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_quizz INTEGER,
	ref_type_sujet INTEGER,
	PRIMARY KEY (Id),
	KEY (ref_quizz),
	KEY (ref_type_sujet)
)  COMMENT='table de correspondance entre un quizz et les différents types de sujets. ';


CREATE TABLE quizz_question
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_quizz INTEGER,
	ref_question INTEGER,
	PRIMARY KEY (Id),
	UNIQUE UQ_quizz_question_Id(Id),
	KEY (ref_question),
	KEY (ref_quizz)
)  COMMENT='table de correspondance entre le quizz et les différentes questions posées';


CREATE TABLE type_sujet
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	libelle VARCHAR(50) NOT NULL COMMENT 'libellé du type (ex: Hibernate ou J2E)',
	ref_langage INTEGER NOT NULL COMMENT 'clé étrangére vers la table langage',
	PRIMARY KEY (Id),
	UNIQUE UQ_type_sujet_libelle(libelle),
	KEY (ref_langage)
)  COMMENT='recense les types de technologies des questions posées';


CREATE TABLE quizz
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	int_duree INTEGER,
	lib_nom_candidat VARCHAR(50),
	lib_commentaire TEXT,
	dat_quizz DATETIME COMMENT 'date du passage du quizz par le candidat',
	ref_admin INTEGER NOT NULL,
	PRIMARY KEY (Id),
	UNIQUE UQ_quizz_Id(Id),
	KEY (ref_admin)
)  COMMENT='recense des quizz';


CREATE TABLE question
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	ref_type_sujet INTEGER NOT NULL COMMENT 'clé etrangère vers la table des types de sujet',
	lib_question TEXT COMMENT 'libellé de la question posée',
	ref_niveau_question INTEGER NOT NULL COMMENT 'difficulté de la question',
	dat_creation DATE COMMENT 'date de création de la question',
	int_duree_reflexion INTEGER COMMENT 'durée estimée pour répondre à une question',
	bol_unique_reponse BOOL COMMENT 'indique si une question a une ou plusieurs réponse(s) possible(s) 0->une reponse 1->plusieurs reponses',
	url_image VARCHAR(50) COMMENT 'url d''une éventuelle image utilisée pour la question',
	PRIMARY KEY (Id),
	KEY (ref_niveau_question),
	KEY (ref_type_sujet)
)  COMMENT='recence des questions pour chaque type de sujet';


CREATE TABLE niveau_question
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	lib_niveau VARCHAR(50) COMMENT 'niveau du quizz',
	PRIMARY KEY (Id)
) ;


CREATE TABLE langage
(
	id INTEGER NOT NULL AUTO_INCREMENT COMMENT 'id unique de la table langage',
	libelle VARCHAR(50) NOT NULL COMMENT 'libelle du langage (exemple jee,java,...)',
	PRIMARY KEY (id)
)  COMMENT='Table qui recense les différents langage telle que java,UMl,C';


CREATE TABLE admin
(
	Id INTEGER NOT NULL AUTO_INCREMENT,
	lib_nom VARCHAR(50),
	lib_prenom VARCHAR(50),
	lib_password VARCHAR(50),
	PRIMARY KEY (Id)
)  COMMENT='recense tous les administrateurs';





--  Create Foreign Key Constraints 
ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE reponse_candidat ADD CONSTRAINT FK_reponse_candidat_reponse 
	FOREIGN KEY (ref_reponse) REFERENCES reponse (id);

ALTER TABLE reponse ADD CONSTRAINT FK_reponse_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE quizz_sujet ADD CONSTRAINT FK_quizz_sujet_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE quizz_sujet ADD CONSTRAINT FK_quizz_sujet_type_sujet 
	FOREIGN KEY (ref_type_sujet) REFERENCES type_sujet (Id);

ALTER TABLE quizz_question ADD CONSTRAINT FK_quizz_question_question 
	FOREIGN KEY (ref_question) REFERENCES question (Id);

ALTER TABLE quizz_question ADD CONSTRAINT FK_quizz_question_quizz 
	FOREIGN KEY (ref_quizz) REFERENCES quizz (Id);

ALTER TABLE type_sujet ADD CONSTRAINT FK_type_sujet_langage 
	FOREIGN KEY (ref_langage) REFERENCES langage (id);

ALTER TABLE quizz ADD CONSTRAINT FK_quizz_admin 
	FOREIGN KEY (ref_admin) REFERENCES admin (Id);

ALTER TABLE question ADD CONSTRAINT FK_question_niveau_question 
	FOREIGN KEY (ref_niveau_question) REFERENCES niveau_question (Id);

ALTER TABLE question ADD CONSTRAINT FK_question_type_sujet 
	FOREIGN KEY (ref_type_sujet) REFERENCES type_sujet (Id);
